Description: Fixes the compatibility with the Servlet API 3.1
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: no
--- a/src/tiles-servlet/src/main/java/org/apache/tiles/web/util/ServletContextAdapter.java
+++ b/src/tiles-servlet/src/main/java/org/apache/tiles/web/util/ServletContextAdapter.java
@@ -24,14 +24,22 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Enumeration;
+import java.util.EventListener;
 import java.util.Hashtable;
+import java.util.Map;
 import java.util.Set;
 
+import javax.servlet.Filter;
+import javax.servlet.FilterRegistration;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
+import javax.servlet.ServletRegistration;
+import javax.servlet.SessionCookieConfig;
+import javax.servlet.SessionTrackingMode;
+import javax.servlet.descriptor.JspConfigDescriptor;
 
 /**
  * Adapts a servlet config and a servlet context to become a unique servlet
@@ -206,4 +214,139 @@
     public String getContextPath() {
         return rootContext.getContextPath();
     }
+
+    @Override
+    public int getEffectiveMajorVersion() {
+        return rootContext.getEffectiveMajorVersion();
+    }
+
+    @Override
+    public int getEffectiveMinorVersion() {
+        return rootContext.getEffectiveMinorVersion();
+    }
+
+    @Override
+    public boolean setInitParameter(String name, String value) {
+        return rootContext.setInitParameter(name, value);
+    }
+
+    @Override
+    public ServletRegistration.Dynamic addServlet(String servletName, String className) {
+        return rootContext.addServlet(servletName, className);
+    }
+
+    @Override
+    public ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet) {
+        return rootContext.addServlet(servletName, servlet);
+    }
+
+    @Override
+    public ServletRegistration.Dynamic addServlet(String servletName, Class<? extends Servlet> servletClass) {
+        return rootContext.addServlet(servletName, servletClass);
+    }
+
+    @Override
+    public <T extends Servlet> T createServlet(Class<T> clazz) throws ServletException {
+        return rootContext.createServlet(clazz);
+    }
+
+    @Override
+    public ServletRegistration getServletRegistration(String servletName) {
+        return rootContext.getServletRegistration(servletName);
+    }
+
+    @Override
+    public Map<String, ? extends ServletRegistration> getServletRegistrations() {
+        return rootContext.getServletRegistrations();
+    }
+
+    @Override
+    public FilterRegistration.Dynamic addFilter(String filterName, String className) {
+        return rootContext.addFilter(filterName, className);
+    }
+
+    @Override
+    public FilterRegistration.Dynamic addFilter(String filterName, Filter filter) {
+        return rootContext.addFilter(filterName, filter);
+    }
+
+    @Override
+    public FilterRegistration.Dynamic addFilter(String filterName, Class<? extends Filter> filterClass) {
+        return rootContext.addFilter(filterName, filterClass);
+    }
+
+    @Override
+    public <T extends Filter> T createFilter(Class<T> clazz) throws ServletException {
+        return rootContext.createFilter(clazz);
+    }
+
+    @Override
+    public FilterRegistration getFilterRegistration(String filterName) {
+        return rootContext.getFilterRegistration(filterName);
+    }
+
+    @Override
+    public Map<String, ? extends FilterRegistration> getFilterRegistrations() {
+        return rootContext.getFilterRegistrations();
+    }
+
+    @Override
+    public SessionCookieConfig getSessionCookieConfig() {
+        return rootContext.getSessionCookieConfig();
+    }
+
+    @Override
+    public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingModes) {
+        rootContext.setSessionTrackingModes(sessionTrackingModes);
+    }
+
+    @Override
+    public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
+        return rootContext.getDefaultSessionTrackingModes();
+    }
+
+    @Override
+    public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
+        return rootContext.getEffectiveSessionTrackingModes();
+    }
+
+    @Override
+    public void addListener(String className) {
+        rootContext.addListener(className);
+    }
+
+    @Override
+    public <T extends EventListener> void addListener(T t) {
+        rootContext.addListener(t);
+    }
+
+    @Override
+    public void addListener(Class<? extends EventListener> listenerClass) {
+        rootContext.addListener(listenerClass);
+    }
+
+    @Override
+    public <T extends EventListener> T createListener(Class<T> clazz) throws ServletException {
+        return rootContext.createListener(clazz);
+    }
+
+    @Override
+    public JspConfigDescriptor getJspConfigDescriptor() {
+        return rootContext.getJspConfigDescriptor();
+    }
+
+    @Override
+    public ClassLoader getClassLoader() {
+        return rootContext.getClassLoader();
+    }
+
+    @Override
+    public void declareRoles(String... roleNames) {
+        rootContext.declareRoles(roleNames);
+    }
+
+    @Override
+    public String getVirtualServerName() {
+        return rootContext.getVirtualServerName();
+    }
 }
